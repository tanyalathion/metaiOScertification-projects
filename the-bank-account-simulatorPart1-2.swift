/*
----------------- Ce √† quoi vous pouvez vous attendre --------------------------
Vous travaillerez avec des fonctions, des boucles, des instructions conditionnelles,
des instructions de commutation, des structures et des classes
pour cr√©er les fonctionnalit√©s du simulateur de compte bancaire.

Les op√©rations du simulateur de compte bancaire sont impl√©ment√©es avec des fonctions
et regroup√©es dans la structure du projet.
La logique du simulateur utilise des boucles pour traiter les donn√©es de l'utilisateur
et cr√©er des comptes bancaires valides.
Les instructions conditionnelles et les instructions de commutation
mettent en ≈ìuvre des op√©rations de compte bancaire valides
et veillent √† ce que le simulateur de compte bancaire fonctionne sans probl√®me tout au long du processus.

Vous allez cr√©er un simulateur de compte bancaire pour :

- Cr√©er des comptes bancaires valides
- V√©rifier le solde des comptes bancaires
- Valider les retraits des comptes bancaires et les d√©p√¥ts sur les comptes bancaires.

En fin de compte, vous coderez un simulateur de compte bancaire en cr√©ant un compte bancaire valide
et en utilisant ensuite une logique de programmation appropri√©e pour le g√©rer.
Vous configurerez le simulateur de compte bancaire pour v√©rifier le solde du compte bancaire,
valider les retraits du compte bancaire et surveiller les d√©p√¥ts sur le compte bancaire.
--------------------------------------------------------------------------------
*/

/* +++++++++++++++++ Partie 1: Cr√©er le compte bancaire +++++++++++++++++++++ */
/* üìù‚Äã Cr√©er les options de d√©bit et de cr√©dit du compte bancaire */
/* üëâ‚Äã D√©finir une classe et utiliser des boucles pour cr√©er un compte bancaire valide en fonction du choix de l'utilisateur.*/
class VirtualBankSystem {
    var accountType = ""
    func welcomeCustomer() {
        print("Welcome to your virtual bank system.")
    }
    func onboardCustomerAccountOpening() {
        print("What kind of account would you like to open?")
        print("1. Debit account")
        print("2. Credit account")
    }
    /* üëâ‚Äã Utiliser des instructions de commutation pour s√©lectionner le bon type de compte bancaire
    √† partir de la liste des types de comptes bancaires valides fournie par le simulateur de compte bancaire.*/
    func makeAccount(numberPadKey: Int) {
        print("The selected option is \(numberPadKey).")
        switch numberPadKey {
        case 1:
            accountType = "debit"
        case 2:
            accountType = "credit"
        /* Les instructions de commutation doivent toujours traiter tous les cas.
        Le cas par d√©faut traite tous les cas que les autres cas de commutation ne traitent pas.*/
        default:
            print("Invalid input: \(numberPadKey)")
            return /*L'instruction break quitte le cas par d√©faut sans rien faire d'autre.*/
        }
        print("You have opened a \(accountType) account.")
    }
}
let virtualBankSystem = VirtualBankSystem()
virtualBankSystem.welcomeCustomer()

repeat {
    virtualBankSystem.onboardCustomerAccountOpening()
    let numberPadKey = Int.random(in: 1...3)
    virtualBankSystem.makeAccount(numberPadKey: numberPadKey)
} while virtualBankSystem.accountType == ""

/*
------------------------------- üß™‚Äã TESTS 1Ô∏è‚É£‚Äã -------------------------------------
Welcome to your virtual bank system.
What kind of account would you like to open?
1. Debit account
2. Credit account
The selected option is 1.
You have opened a debit account.
--------------------------------------------------------------------------------
*/

/* ++++++++++ Partie 2: D√©finir les op√©rations du compte bancaire +++++++++++ */
/* üìù‚Äã Configurer le compte bancaire pour qu'il puisse g√©rer diff√©rents types d'op√©rations,
y compris les retraits et les d√©p√¥ts. */
/* üëâ‚Äã Utiliser des structures et des classes pour cr√©er des op√©rations de compte bancaire valides
et modulariser le code du projet.*/
struct BankAccount {
    var debitBalance = 0
    var creditBalance = 0
    let creditLimit = 100
    var debitBalanceInfo: String {
            "Debit balance: $\(debitBalance)"
    }
    var availableCredit: Int {
        creditLimit + creditBalance
    }
    var creditBalanceInfo: String {
        "Available credit: $\(availableCredit)"
    }
    /* üëâ‚Äã Configurer des instructions conditionnelles pour mettre en ≈ìuvre
    la logique des retraits des comptes bancaires et des d√©p√¥ts sur les comptes bancaires.*/

    /* D√©p√¥t au d√©bit */
    mutating func debitDeposit(_ amount: Int) {
        debitBalance += amount
        print("Debit deposit: $\(amount). \(debitBalanceInfo)")
    }
    /* Retrait de d√©bit */
    mutating func debitWithdraw(_ amount: Int){
        if amount > debitBalance {
            print("Insufficient fund to withdraw $\(amount). \(debitBalanceInfo)")
        }else{
            debitBalance -= amount
            print("Debit withdraw: $\(amount). \(debitBalanceInfo)")
        }
    }

    /* D√©p√¥t de cr√©dit */
    mutating func creditDeposit(_ amount: Int) {
        creditBalance += amount
        print("Credit deposit: $\(amount). \(creditBalanceInfo)")
        if creditBalance == 0 {
            print("Paid off credit balance.")
        } else if creditBalance > 0 {
            print("Overpaid credit balance.")
        }
    }

    /* Retrait de cr√©dit */
    mutating func creditWithdraw(_ amount: Int){
        if amount > availableCredit {
            print("Insufficient credit to withdraw $\(amount). \(creditBalanceInfo)")
        }else{
            creditBalance -= amount
            print("Credit withdraw: $\(amount). \(creditBalanceInfo)")
        }
    }
}

var bankAccount = BankAccount()
/* Test des op√©rations bancaires de d√©bit */
print (bankAccount.debitBalanceInfo)
bankAccount.debitDeposit(100) /* D√©p√¥t */
bankAccount.debitWithdraw(20) /* Retrait */
bankAccount.debitWithdraw(81)
print(bankAccount.creditBalanceInfo) /* solde cr√©diteur actuel */
bankAccount.creditWithdraw(101) /*Retrait*/
bankAccount.creditWithdraw(100)
bankAccount.creditDeposit(50) /* D√©p√¥t */
bankAccount.creditDeposit(50)
bankAccount.creditDeposit(100)

/*
------------------------------- üß™‚Äã TESTS 2Ô∏è‚É£‚Äã‚Äã -------------------------------------
Debit balance: $0
Debit deposit: $100. Debit balance: $100
Debit withdraw: $20. Debit balance: $80
Insufficient funds to withdraw $81. Debit balance: $80
Available credit: $100
Insufficient credit to withdraw $101. Available credit: $100
Credit withdraw: $100. Available credit: $0
Credit deposit: $50. Available credit: $50
Credit deposit: $50. Available credit: $100
Paid off credit balance.
Credit deposit: $100. Available credit: $200
Overpaid credit balance.
--------------------------------------------------------------------------------
*/
